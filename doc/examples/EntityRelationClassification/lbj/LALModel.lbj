package edu.illinois.cs.cogcomp.tutorial;

import java.util.List;
import edu.illinois.cs.cogcomp.core.io.LineIO;
import edu.illinois.cs.cogcomp.tutorial.datastruct.ConllRawToken;
import edu.illinois.cs.cogcomp.tutorial.datastruct.ConllRelation;
//import ConllReader.Conll04_InstanceReader;
import edu.illinois.cs.cogcomp.tutorial.Conll04_RelationReaderNew;

discrete% EntityFeatures(ConllRawToken t) <- {
sense t.POS;
}
discrete% RelationFeatures(ConllRelation t) <- {
sense ("WORD1:"+t.s.sentTokens.elementAt(t.wordId1).phrase);
sense ("WORD2:"+t.s.sentTokens.elementAt(t.wordId2).phrase);
}

discrete {"Peop","nPeop"} personLabel(ConllRawToken t) <- {
      if (t.entType.equalsIgnoreCase("Peop"))
					return("Peop");
      else
					return("nPeop");
}

discrete PersonClassifier(ConllRawToken t) <-
learn personLabel
  using EntityFeatures
  from new Conll04_RelationReaderNew("/shared/shelley/khashab2/lbjava/doc/examples/EntityRelationClassification/data/conll04.corp", "token")
  50 rounds

  with SparsePerceptron {
    learningRate = 0.1 ;
    thickness = 3.5;
  }

  testFrom new Conll04_RelationReaderNew("/shared/shelley/khashab2/lbjava/doc/examples/EntityRelationClassification/data/conll04.corp", "token")
  progressOutput 200
end


discrete {"Loc","nLoc"} locLabel(ConllRawToken t) <- {
      if (t.entType.equalsIgnoreCase("Loc"))
					return("Loc");
      else
					return("nLoc");
}


discrete LocClassifier(ConllRawToken t) <-
learn locLabel
  using EntityFeatures
  from new Conll04_RelationReaderNew("/shared/shelley/khashab2/lbjava/doc/examples/EntityRelationClassification/data/conll04.corp", "token")
  50 rounds

  with SparsePerceptron {
    learningRate = 0.1 ;
    thickness = 3.5;
  }

  testFrom new Conll04_RelationReaderNew("/shared/shelley/khashab2/lbjava/doc/examples/EntityRelationClassification/data/conll04.corp","token")
 
  progressOutput 200
end

discrete {"Org","nOrg"} orgLabel(ConllRawToken t) <- {
      if (t.entType.equalsIgnoreCase("Org"))
					return("Org");
      else
					return("nOrg");
}


discrete OrganizationClassifier(ConllRawToken t) <-
learn orgLabel
  using EntityFeatures
  from new Conll04_RelationReaderNew("/shared/shelley/khashab2/lbjava/doc/examples/EntityRelationClassification/data/conll04.corp", "token")
  50 rounds

  with SparsePerceptron {
    learningRate = 0.1 ;
    thickness = 3.5;
  }

  testFrom new Conll04_RelationReaderNew("/shared/shelley/khashab2/lbjava/doc/examples/EntityRelationClassification/data/conll04.corp", "token")
 
  progressOutput 200
end

discrete {"Work_For","nWork_For"} workLabel(ConllRelation t) <- {
      if (t.relType.equalsIgnoreCase("Work_For"))
					return("Work_For");
      else
					return("nWork_For");
}

discrete work_forClassifier(ConllRelation t) <- 
learn workLabel
  using RelationFeatures
  from new Conll04_RelationReaderNew("/shared/shelley/khashab2/lbjava/doc/examples/EntityRelationClassification/data/conll04.corp", "pair")
  50 rounds

  with SparsePerceptron {
    learningRate = 0.1 ;
    thickness = 3.5;
  }
testFrom new Conll04_RelationReaderNew("/shared/shelley/khashab2/lbjava/doc/examples/EntityRelationClassification/data/conll04.corp", "pair")

  progressOutput 200
end
